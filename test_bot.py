#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from main import (
    get_moscow_time, 
    format_moscow_date, 
    is_allowed_user, 
    get_message_from_update,
    parse_voice_command,
    extract_params_from_voice,
    parse_search_query,
    matches_filters
)

def test_basic_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    # –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
    moscow_time = get_moscow_time()
    print(f"‚úÖ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: {moscow_time}")
    
    formatted_date = format_moscow_date()
    print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {formatted_date}")
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    test_commands = [
        "–ø–æ–∫–∞–∂–∏ —Ç—Ä–∞—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é",
        "–∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ò–Ω—Ç–∏–≥–∞–º",
        "–Ω–∞–π–¥–∏ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ü–µ—Ç—Ä–æ–≤—ã–º",
        "–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –º–µ—Å—è—Ü"
    ]
    
    for cmd in test_commands:
        result = parse_voice_command(cmd)
        if result:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ '{cmd}' -> {result['command']}")
        else:
            print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ '{cmd}' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    test_params = [
        ("–∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ò–Ω—Ç–∏–≥–∞–º", "suppliers"),
        ("–Ω–∞–π–¥–∏ –ü–µ—Ç—Ä–æ–≤–∞ –∑–∞ –Ω–µ–¥–µ–ª—é", "search")
    ]
    
    for text, cmd_type in test_params:
        params = extract_params_from_voice(text, cmd_type)
        print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ '{text}': {params}")
    
    # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_queries = [
        "–ü–µ—Ç—Ä–æ–≤ –¥–µ–∫–∞–±—Ä—å",
        "–ø–æ—Å—Ç–∞–≤—â–∏–∫ >100000",
        "–∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–µ–¥–µ–ª—è"
    ]
    
    for query in test_queries:
        filters = parse_search_query(query)
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã –¥–ª—è '{query}': {filters}")
    
    print("\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")

def test_search_functions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    test_records = [
        {
            '–î–∞—Ç–∞': '15.12.2024',
            '–û–ø–∏—Å–∞–Ω–∏–µ/–ü–æ–ª—É—á–∞—Ç–µ–ª—å': '–ü–µ—Ç—Ä–æ–≤',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–ó–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º',
            '–°—É–º–º–∞': -40000
        },
        {
            '–î–∞—Ç–∞': '10.12.2024',
            '–û–ø–∏—Å–∞–Ω–∏–µ/–ü–æ–ª—É—á–∞—Ç–µ–ª—å': '–ò–Ω—Ç–∏–≥–∞–º',
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': '–û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É',
            '–°—É–º–º–∞': -150000
        }
    ]
    
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters = parse_search_query("–ü–µ—Ç—Ä–æ–≤")
    for record in test_records:
        matches = matches_filters(record, filters)
        print(f"‚úÖ –ó–∞–ø–∏—Å—å '{record['–û–ø–∏—Å–∞–Ω–∏–µ/–ü–æ–ª—É—á–∞—Ç–µ–ª—å']}' —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É '–ü–µ—Ç—Ä–æ–≤': {matches}")
    
    print("üéâ –¢–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞...\n")
    
    try:
        test_basic_functions()
        test_search_functions()
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üìä –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc() 